{{- /* Go Template */ -}}
// Code generated by go-tizot {{.Version}}, DO NOT EDIT.
package {{.PackageName}}

import (
	"time"
	"slices"
	"strings"
)

type Zone struct {
	ID          string
	Transitions []Transition
}

type Transition struct {
	When         time.Time
	OffsetBefore time.Duration
	OffsetAfter  time.Duration
}

func AvailableZoneIDs() []string {
	return append([]string{}, zoneIDs...)
}

func GetZone(zoneID string) (zone Zone, found bool) {
	zone, found = zones[zoneID]
	return zone, found
}

func GetTZVersion() string {
	return strings.TrimSpace("{{.TZVersion}}")
}

var zoneIDs = func() []string {
	zoneIDs := []string{}
	for zoneID := range zones {
		zoneIDs = append(zoneIDs, zoneID)
	}
	slices.Sort(zoneIDs)
	return zoneIDs
}()

var zones = map[string]Zone{
	{{range $Index, $Zone := .Zones}}{{$Zone.IDLiteral}}: {
		ID:	{{$Zone.IDLiteral}},
		Transitions: []Transition{
			{{range $Index, $Transition := $Zone.Transitions}}{
				When:         time.Unix({{$Transition.WhenUnix}}, 0),
				OffsetBefore: {{$Transition.OffsetBeforeNano}},
				OffsetAfter:  {{$Transition.OffsetAfterNano}},
			},
			{{end}}
		},
	},
	{{end}}
}
