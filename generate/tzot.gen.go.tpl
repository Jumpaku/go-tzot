{{- /* Go Template */ -}}
// Code generated by go-tizot {{.Version}}, DO NOT EDIT.
package {{.PackageName}}

import (
	"time"
	"slices"
	"strings"
)

type Zone struct {
	ID          string
	Transitions []Transition
	Rules       []Rule
}

type Transition struct {
	When         time.Time
	OffsetBefore time.Duration
	OffsetAfter  time.Duration
}

type RuleType string

const (
	RuleTypeWeekDayPositive  RuleType = "net.jumpaku.tzot.Rule.WeekDayPositive"
	RuleTypeWeekDayNegative  RuleType = "net.jumpaku.tzot.Rule.WeekDayNegative"
	RuleTypeMonthDayPositive RuleType = "net.jumpaku.tzot.Rule.MonthDayPositive"
	RuleTypeMonthDayNegative RuleType = "net.jumpaku.tzot.Rule.MonthDayNegative"
)

type Rule struct {
	RuleType          RuleType
	OffsetBefore      time.Duration
	OffsetAfter       time.Duration
	Month             time.Month
	TimeOffset        time.Duration
	TimeHour          int
	TimeMinute        int
	TimeSecond        int
	DayOfWeek         time.Weekday
	MonthDays         int
	MonthDaysFromLast int
}

func AvailableZoneIDs() []string {
	return append([]string{}, zoneIDs...)
}

func GetZone(zoneID string) (zone Zone, found bool) {
	zone, found = zones[zoneID]
	return zone, found
}

func GetTZVersion() string {
	return strings.TrimSpace("{{.TZVersion}}")
}

var zoneIDs = func() []string {
	zoneIDs := []string{}
	for zoneID := range zones {
		zoneIDs = append(zoneIDs, zoneID)
	}
	slices.Sort(zoneIDs)
	return zoneIDs
}()

var zones = map[string]Zone{
	{{range $Index, $Zone := .Zones}}{{$Zone.IDLiteral}}: {
		ID:	{{$Zone.IDLiteral}},
		Transitions: []Transition{
			{{range $Index, $Transition := $Zone.Transitions}}{
				When:         time.Unix({{$Transition.WhenUnix}}, 0),
				OffsetBefore: {{$Transition.OffsetBeforeNano}},
				OffsetAfter:  {{$Transition.OffsetAfterNano}},
			},
			{{end}}
		},
		Rules: []Rule{
			{{range $Index, $Rule := $Zone.Rules}}{
				RuleType:          {{$Rule.RuleType}},
				OffsetBefore:      {{$Rule.OffsetBeforeNano}},
				OffsetAfter:       {{$Rule.OffsetAfterNano}},
				Month:             {{$Rule.Month}},
				TimeOffset:        {{$Rule.TimeOffsetNano}},
				TimeHour:          {{$Rule.TimeHour}},
				TimeMinute:        {{$Rule.TimeMinute}},
				TimeSecond:        {{$Rule.TimeSecond}},
				DayOfWeek:         {{$Rule.DayOfWeek}},
				MonthDays:         {{$Rule.MonthDays}},
				MonthDaysFromLast: {{$Rule.MonthDaysFromLast}},
			},
			{{end}}
		},
	},
	{{end}}
}
